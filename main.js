const { Telegraf } = require('telegraf');
require('dotenv').config();

if (process.env.TOKEN === undefined) {
    throw new TypeError('BOT_TOKEN must be provided!')
}

const config = {
    "token": process.env.TOKEN
};

const bot = new Telegraf(
    config.token, {}
);

const data = {};

introduction = '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ Nissenger ‚úã\n\n';
introduction += '–ù–∞—à—ë–ª –±–∞–≥ –∏–ª–∏ –µ—Å—Ç—å —á–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∞–º–∏? –ù–∞–∂–º–∏ –Ω–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫—É" –∏ —Ä–∞—Å–ø–∏—à–∏ —Ç—É—Ç, –∞ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç—ë–º –∏ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è ü§ñ\n\n';
introduction += '–•–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —à–∫–æ–ª—å–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π? –¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π –Ω–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é" –∏ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ üè´\n\n';
introduction += '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –º—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å —Ç–æ–±–æ–π ‚Äî –æ—Å—Ç–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –ø–æ—á—Ç—É üòé';

function make_report(ctx) {
    report = '******\tReport\t******\n\n';
    report += `USER-ID: ${ctx.message.from.id}\n`;
    report += `USER-FIRSTNAME: ${ctx.from.first_name}\n`;
    report += `USER-USERNAME: ${ctx.from.username}\n\n`;
    report += `BOT: ${ctx.from.is_bot}\n\n`;
    report += `CHAT-ID: ${ctx.chat.id}\n`;
    report += `CHAT-FIRSTNAME: ${ctx.chat.first_name}\n`;
    report += `CHAT-USERNAME: ${ctx.chat.username}\n\n`;
    report += `–°–æ–æ–±—â–µ–Ω–∏–µ: "${ctx.message.text}"`;

    return report;
}

bot.start((ctx) => {
    ctx.telegram.sendMessage(ctx.chat.id, introduction, {
        reply_markup: {
            one_time_keyboard: true,
            resize_keyboard: true,
            inline_keyboard: [
                [{text:"üè´ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é üè´", callback_data: "administration"}],
                [{text:"ü§ñ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫—É ü§ñ", callback_data: "technical support"}]
            ]
        }
    });
});

bot.action("administration", (ctx) => {
    data[ctx.from.id] = "admin";
    ctx.reply("–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:");
});

bot.action("technical support", (ctx) => {
    data[ctx.from.id] = "support";
    ctx.reply("–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º:");
});

bot.on("text", (ctx) => {
    if (ctx.message.reply_to_message && ctx.message.reply_to_message.text.startsWith("****** Report ******")) {
        if (
            (ctx.from.id === 1270570382 || ctx.from.id === 999657821) && 
            (ctx.chat.id == process.env.NISSENGER_CHAT_ID || ctx.chat.id == process.env.ADMIN_CHAT_ID)
        ) {
            const message = ctx.message.reply_to_message.text;
            const chatid = message.slice(message.indexOf("CHAT-ID:") + 9, message.indexOf("CHAT-FIRSTNAME:") - 1);

            if (ctx.chat.id == process.env.NISSENGER_CHAT_ID) {
                ctx.telegram.sendMessage(chatid, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n" + ctx.message.text);
            } else if (ctx.chat.id == process.env.ADMIN_CHAT_ID) {
                ctx.telegram.sendMessage(chatid, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —à–∫–æ–ª—å–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n" + ctx.message.text);
            }
        }
    } else {
        if (data[ctx.from.id]) {
            report = make_report(ctx);

            switch (data[ctx.from.id]) {
                case "admin":
                    ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, report);
                    break;
                case "support":
                    ctx.telegram.sendMessage(process.env.NISSENGER_CHAT_ID, report);
                    break;
            }

            data[ctx.from.id] = undefined;

            ctx.reply("–û—Ç–ø—Ä–∞–≤–∏–ª–∏! –¢–µ–±–µ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç üïë", {
                reply_markup: {
                    one_time_keyboard: true,
                    resize_keyboard: true,
                    inline_keyboard: [
                        [{text:"üè´ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é üè´", callback_data: "administration"}],
                        [{text:"ü§ñ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫—É ü§ñ", callback_data: "technical support"}]
                    ]
                }
            });
        }
    }
});

bot.launch();
